Sim, você está correto. Usando flatMap, todas as operações de todos os trades serão tratadas como um único fluxo, o que significa que os impostos serão acumulados ao longo de todas as operações. Se você quiser manter os impostos separados por cada operação, você pode usar map em vez de flatMap. Aqui está como você pode fazer isso:

java
Copy code
trades.getOperations().stream()
    .map(trade -> trade.stream()
                       .reduce(new InvestmentStatus(), 
                               (investmentStatus, operation) -> calculateOperationTaxes(operation, investmentStatus), 
                               (s1, s2) -> s1)) // reduz cada lista de operações para um InvestmentStatus separado
    .forEach(investmentStatus -> System.out.println(toTaxesJson(investmentStatus.getTaxes())));
Neste código:

.map(trade -> trade.stream()...: Para cada lista de operações (trade), cria um stream de operações.
.reduce(new InvestmentStatus(), ...): Reduz cada lista de operações para um único InvestmentStatus, calculando os impostos para cada operação.
.forEach(investmentStatus -> System.out.println(toTaxesJson(investmentStatus.getTaxes()))): Imprime o resultado em formato JSON para cada InvestmentStatus separado.
Dessa forma, os impostos serão mantidos separados para cada operação dentro de cada trade. Espero que isso ajude! Se precisar de mais alguma coisa, estou aqui para ajudar.